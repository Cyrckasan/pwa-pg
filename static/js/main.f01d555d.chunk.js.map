{"version":3,"sources":["components/App/index.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["App","useState","deferredPrompt","setDeferredPrompt","useEffect","eventName","onBeforeInstallPrompt","e","preventDefault","alert","window","addEventListener","removeEventListener","isStandaloneIos","navigator","standalone","isStandaloneAndroid","matchMedia","matches","isStandalone","onClick","prompt","userChoice","then","choiceResult","outcome","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oLAiEeA,EA7DW,WAAO,IAAD,EACcC,qBADd,mBACvBC,EADuB,KACPC,EADO,KAG9BC,qBAAU,WACR,IAAMC,EAAY,sBAEZC,EAAwB,SAACC,GAE7BA,EAAEC,iBAGFL,EAAkBI,GAElBE,MAAMJ,IAKR,OAFAK,OAAOC,iBAAiBN,EAAWC,GAE5B,kBAAMI,OAAOE,oBAAoBP,EAAWC,MAClD,IAEH,IAAMO,EACJ,eAAgBH,OAAOI,YAAeJ,OAAOI,UAAkBC,WAE3DC,GAAuBN,OAAOO,WAAW,8BAC5CC,QAEGC,KAAkBN,IAAmBG,GAE3C,OACE,gCACE,kDAEKd,EAAiB,SAAW,WAEjC,wBACEkB,QAAS,WACFlB,GACHO,MAAM,+BAGRP,EAAemB,SACfnB,EAAeoB,WAAWC,MAAK,SAACC,GACD,aAAzBA,EAAaC,QACfhB,MAAM,oCAENA,MAAM,yCAXd,iCAmBA,mDAAsBU,KACtB,sDAAyBN,KACzB,0DAA6BG,SChD7BU,EAAcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DA2CN,SAASC,EAAgBC,EAAeC,GACtCnB,UAAUoB,cACPC,SAASH,GACTT,MAAK,SAACa,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUoB,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAAST,KAMlBO,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC5FjE,IAAM3C,EAAY,sBAOlBK,OAAOC,iBAAiBN,GALM,SAACE,GAC7BA,EAAEC,iBACFC,MAAMJ,EAAY,4CAKpB4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDKnB,SAAkBpB,GACvB,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIwC,IAAIC,IAAwB7C,OAAOkB,SAAS4B,MACpDC,SAAW/C,OAAOkB,SAAS6B,OAIvC,OAGF/C,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMqB,EAAK,UAAMuB,IAAN,sBAEP7B,IAgEV,SAAiCM,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BpC,MAAK,SAACqC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClD,UAAUoB,cAAc+B,MAAM1C,MAAK,SAACa,GAClCA,EAAa8B,aAAa3C,MAAK,WAC7Bb,OAAOkB,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBpC,EAAOC,GAI/BnB,UAAUoB,cAAc+B,MAAM1C,MAAK,WACjCoB,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OC3B/BoC,K","file":"static/js/main.f01d555d.chunk.js","sourcesContent":["import { FC, useEffect, useState } from \"react\";\n\ntype AppProps = {};\n\nconst App: FC<AppProps> = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState<any>();\n\n  useEffect(() => {\n    const eventName = \"beforeinstallprompt\";\n\n    const onBeforeInstallPrompt = (e: any) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n\n      setDeferredPrompt(e);\n\n      alert(eventName);\n    };\n\n    window.addEventListener(eventName, onBeforeInstallPrompt);\n\n    return () => window.removeEventListener(eventName, onBeforeInstallPrompt);\n  }, []);\n\n  const isStandaloneIos =\n    \"standalone\" in window.navigator && !(window.navigator as any).standalone;\n\n  const isStandaloneAndroid = !window.matchMedia(\"(display-mode: standalone)\")\n    .matches;\n\n  const isStandalone = !!(isStandaloneIos || isStandaloneAndroid);\n\n  return (\n    <div>\n      <div>\n        deferredPrompt:\n        {!!deferredPrompt ? \"truthy\" : \"falsy\"}\n      </div>\n      <button\n        onClick={() => {\n          if (!deferredPrompt) {\n            alert(\"deferredPrompt was falsy...\");\n          }\n\n          deferredPrompt.prompt();\n          deferredPrompt.userChoice.then((choiceResult: any) => {\n            if (choiceResult.outcome === \"accepted\") {\n              alert(\"User accepted the install prompt\");\n            } else {\n              alert(\"User dismissed the install prompt\");\n            }\n          });\n        }}\n      >\n        show install prompt\n      </button>\n\n      <div>is standalone : {isStandalone}</div>\n      <div>is standalone ios: {isStandaloneIos}</div>\n      <div>is standalone android: {isStandaloneAndroid}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\n\n\n\nconst eventName = \"beforeinstallprompt\";\n\nconst onBeforeInstallPrompt = (e: any) => {\n  e.preventDefault();\n  alert(eventName + \"was catched outside the App component\");\n};\n\nwindow.addEventListener(eventName, onBeforeInstallPrompt);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}