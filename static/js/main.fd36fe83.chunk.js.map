{"version":3,"sources":["contexts/BeforeInstallPromptEventContext.ts","components/BeforeInstallPromptSubscriber/index.tsx","components/InstallAdviser/index.tsx","components/App/index.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["BeforeInstallPromptEventContext","createContext","BeforeInstallPromptEventProvider","Provider","Consumer","BeforeInstallPromptSubscriber","children","useState","beforeEnstallPromptEvent","setBeforeEnstallPromptEvent","useEffect","eventName","onBeforeInstallPrompt","e","preventDefault","window","addEventListener","removeEventListener","value","InstallAdviser","deferredPrompt","useContext","onClick","prompt","userChoice","then","choiceResult","outcome","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6KAEaA,EAAkCC,wBAC7C,MAGWC,EACXF,EAAgCG,S,GAGhCH,EAAgCI,S,MCqBnBC,EA5B2B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAItDC,mBAA0C,MAJY,mBAExDC,EAFwD,KAGxDC,EAHwD,KAqB1D,OAfAC,qBAAU,WACR,IAAMC,EAAY,sBAEZC,EAAuC,SAACC,GAE5CA,EAAEC,iBAEFL,EAA4BI,IAK9B,OAFAE,OAAOC,iBAAiBL,EAAWC,GAE5B,kBAAMG,OAAOE,oBAAoBN,EAAWC,MAClD,IAGD,cAACV,EAAD,CAAkCgB,MAAOV,EAAzC,SACGF,KCOQa,EA5BiC,WAC9C,IAAMC,EAAiBC,qBAAWrB,GAElC,OACE,gCACE,2TAEGoB,GACD,wBACEE,QAAS,WACPF,EAAeG,SAEfH,EAAeI,WAAWC,MAAK,SAACC,GAC1BA,EAAaC,YALvB,uGCCOC,EARW,WACxB,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCGAC,EAAcC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DA2CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTV,MAAK,SAACe,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC/FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiBnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,IAAwB5C,OAAOgB,SAAS6B,MACpDC,SAAW9C,OAAOgB,SAAS8B,OAIvC,OAGF9C,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMmB,EAAK,UAAMwB,IAAN,sBAEP9B,IAgEV,SAAiCM,EAAeC,GAE9C0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BtC,MAAK,SAACuC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM5C,MAAK,SAACe,GAClCA,EAAa8B,aAAa7C,MAAK,WAC7BV,OAAOgB,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM5C,MAAK,WACjCsB,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OCvC/BqC,K","file":"static/js/main.fd36fe83.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const BeforeInstallPromptEventContext = createContext<null | BeforeInstallPromptEvent>(\n  null\n);\n\nexport const BeforeInstallPromptEventProvider =\n  BeforeInstallPromptEventContext.Provider;\n\nexport const BeforeInstallPromptEventConsumer =\n  BeforeInstallPromptEventContext.Consumer;\n","import { FC, useEffect, useState } from \"react\";\nimport { BeforeInstallPromptEventProvider } from \"../../contexts/BeforeInstallPromptEventContext\";\n\nconst BeforeInstallPromptSubscriber: FC = ({ children }) => {\n  const [\n    beforeEnstallPromptEvent,\n    setBeforeEnstallPromptEvent,\n  ] = useState<null | BeforeInstallPromptEvent>(null);\n\n  useEffect(() => {\n    const eventName = \"beforeinstallprompt\";\n\n    const onBeforeInstallPrompt: EventListener = (e: Event) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      setBeforeEnstallPromptEvent(e as BeforeInstallPromptEvent);\n    };\n\n    window.addEventListener(eventName, onBeforeInstallPrompt);\n\n    return () => window.removeEventListener(eventName, onBeforeInstallPrompt);\n  }, []);\n\n  return (\n    <BeforeInstallPromptEventProvider value={beforeEnstallPromptEvent}>\n      {children}\n    </BeforeInstallPromptEventProvider>\n  );\n};\n\nexport default BeforeInstallPromptSubscriber;\n","import { FC, useContext } from \"react\";\nimport { BeforeInstallPromptEventContext } from \"../../contexts/BeforeInstallPromptEventContext\";\n\ntype InstallAdviserProps = {};\n\nconst InstallAdviser: FC<InstallAdviserProps> = () => {\n  const deferredPrompt = useContext(BeforeInstallPromptEventContext);\n\n  return (\n    <div>\n      <span>Добавь иконку на экран телефона для быстрого запуска</span>\n\n      {!!deferredPrompt && (\n        <button\n          onClick={() => {\n            deferredPrompt.prompt();\n\n            deferredPrompt.userChoice.then((choiceResult) => {\n              if (choiceResult.outcome === \"accepted\") {\n                // User allowed installation\n              } else {\n                // User did not allow installation\n              }\n            });\n          }}\n        >\n          Добавить иконку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default InstallAdviser;\n","import { FC } from \"react\";\nimport BeforeInstallPromptSubscriber from \"../BeforeInstallPromptSubscriber\";\nimport InstallAdviser from \"../InstallAdviser\";\n\ntype AppProps = {};\n\nconst App: FC<AppProps> = () => {\n  return (\n    <BeforeInstallPromptSubscriber>\n      <InstallAdviser />\n    </BeforeInstallPromptSubscriber>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}